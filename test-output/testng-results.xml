<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="4" total="10" passed="4" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-01-28T15:30:57Z" name="Regression Suite" finished-at="2024-01-28T15:31:07Z" duration-ms="9644">
    <groups>
    </groups>
    <test started-at="2024-01-28T15:30:57Z" name="Testingsites" finished-at="2024-01-28T15:31:07Z" duration-ms="9644">
      <class name="com.app.sunbeam.tests.Test2">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.app.sunbeam.tests.Test2@1339e7aa]" started-at="2024-01-28T15:31:03Z" name="setUp" finished-at="2024-01-28T15:31:06Z" duration-ms="3107" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="getup()[pri:1, instance:com.app.sunbeam.tests.Test2@1339e7aa]" started-at="2024-01-28T15:31:06Z" name="getup" finished-at="2024-01-28T15:31:06Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getup -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.app.sunbeam.tests.Test2@1339e7aa]" started-at="2024-01-28T15:31:06Z" name="beforeMethod" finished-at="2024-01-28T15:31:06Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.app.sunbeam.tests.Test2.getup()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.app.sunbeam.tests.Test2@1339e7aa]" started-at="2024-01-28T15:31:06Z" name="afterMethod" finished-at="2024-01-28T15:31:06Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getup status=SUCCESS method=Test2.getup()[pri:1, instance:com.app.sunbeam.tests.Test2@1339e7aa] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.app.sunbeam.tests.Test2@1339e7aa]" started-at="2024-01-28T15:31:07Z" name="beforeMethod" finished-at="2024-01-28T15:31:07Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.app.sunbeam.tests.Test2.getup1Test()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="getup1Test()[pri:2, instance:com.app.sunbeam.tests.Test2@1339e7aa]" started-at="2024-01-28T15:31:07Z" name="getup1Test" finished-at="2024-01-28T15:31:07Z" duration-ms="2" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertFalse(Assert.java:65)
at org.testng.Assert.assertFalse(Assert.java:75)
at com.app.sunbeam.tests.Test2.getup1Test(Test2.java:16)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
at java.base/java.lang.Thread.run(Thread.java:831)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getup1Test -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.app.sunbeam.tests.Test2@1339e7aa]" started-at="2024-01-28T15:31:07Z" name="afterMethod" finished-at="2024-01-28T15:31:07Z" duration-ms="166" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getup1Test status=FAILURE method=Test2.getup1Test()[pri:2, instance:com.app.sunbeam.tests.Test2@1339e7aa] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- com.app.sunbeam.tests.Test2 -->
      <class name="com.app.sunbeam.tests.Test1">
        <test-method is-config="true" signature="beforeSuite()[pri:0, instance:com.app.sunbeam.tests.Test1@38b27cdc]" started-at="2024-01-28T15:30:57Z" name="beforeSuite" finished-at="2024-01-28T15:30:57Z" duration-ms="337" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.app.sunbeam.tests.Test1@38b27cdc]" started-at="2024-01-28T15:30:57Z" name="setUp" finished-at="2024-01-28T15:31:03Z" duration-ms="6107" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.app.sunbeam.tests.Test1@38b27cdc]" started-at="2024-01-28T15:31:03Z" name="beforeMethod" finished-at="2024-01-28T15:31:03Z" duration-ms="14" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.app.sunbeam.tests.Test1.sample()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="sample()[pri:1, instance:com.app.sunbeam.tests.Test1@38b27cdc]" started-at="2024-01-28T15:31:03Z" name="sample" finished-at="2024-01-28T15:31:03Z" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sample -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.app.sunbeam.tests.Test1@38b27cdc]" started-at="2024-01-28T15:31:03Z" name="afterMethod" finished-at="2024-01-28T15:31:03Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sample status=SUCCESS method=Test1.sample()[pri:1, instance:com.app.sunbeam.tests.Test1@38b27cdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.app.sunbeam.tests.Test1@38b27cdc]" started-at="2024-01-28T15:31:06Z" name="beforeMethod" finished-at="2024-01-28T15:31:06Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.app.sunbeam.tests.Test1.sample1()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="sample1()[pri:2, instance:com.app.sunbeam.tests.Test1@38b27cdc]" started-at="2024-01-28T15:31:06Z" name="sample1" finished-at="2024-01-28T15:31:06Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sample1 -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.app.sunbeam.tests.Test1@38b27cdc]" started-at="2024-01-28T15:31:07Z" name="afterMethod" finished-at="2024-01-28T15:31:07Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sample1 status=SUCCESS method=Test1.sample1()[pri:2, instance:com.app.sunbeam.tests.Test1@38b27cdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="sample2()[pri:3, instance:com.app.sunbeam.tests.Test1@38b27cdc]" started-at="2024-01-28T15:31:07Z" name="sample2" finished-at="2024-01-28T15:31:07Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sample2 -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.app.sunbeam.tests.Test1@38b27cdc]" started-at="2024-01-28T15:31:07Z" name="beforeMethod" finished-at="2024-01-28T15:31:07Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.app.sunbeam.tests.Test1.sample2()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.app.sunbeam.tests.Test1@38b27cdc]" started-at="2024-01-28T15:31:07Z" name="afterMethod" finished-at="2024-01-28T15:31:07Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sample2 status=SUCCESS method=Test1.sample2()[pri:3, instance:com.app.sunbeam.tests.Test1@38b27cdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.app.sunbeam.tests.Test1@38b27cdc]" started-at="2024-01-28T15:31:07Z" name="beforeMethod" finished-at="2024-01-28T15:31:07Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.app.sunbeam.tests.Test1.LoginTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="LoginTest()[pri:4, instance:com.app.sunbeam.tests.Test1@38b27cdc]" started-at="2024-01-28T15:31:07Z" name="LoginTest" finished-at="2024-01-28T15:31:07Z" duration-ms="54" status="FAIL">
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//input[@type='emails']"}
  (Session info: chrome=120.0.6099.227)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.11.0', revision: '040bc5406b'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '16.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [135aae296f6241590dfd8619b69fadb9, findElement {using=xpath, value=//input[@type='emails']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 120.0.6099.227, chrome: {chromedriverVersion: 120.0.6099.109 (3419140ab66..., userDataDir: C:\Users\amitk\AppData\Loca...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:52228}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:52228/devtoo..., se:cdpVersion: 120.0.6099.227, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 135aae296f6241590dfd8619b69fadb9]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//input[@type='emails']"}
  (Session info: chrome=120.0.6099.227)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.11.0', revision: '040bc5406b'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '16.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [135aae296f6241590dfd8619b69fadb9, findElement {using=xpath, value=//input[@type='emails']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 120.0.6099.227, chrome: {chromedriverVersion: 120.0.6099.109 (3419140ab66..., userDataDir: C:\Users\amitk\AppData\Loca...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:52228}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:52228/devtoo..., se:cdpVersion: 120.0.6099.227, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 135aae296f6241590dfd8619b69fadb9
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:78)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at com.app.sunbeam.Pages.LoginPage.EnterUserName(LoginPage.java:19)
at com.app.sunbeam.tests.Test1.LoginTest(Test1.java:28)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
at java.base/java.lang.Thread.run(Thread.java:831)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginTest -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.app.sunbeam.tests.Test1@38b27cdc]" started-at="2024-01-28T15:31:07Z" name="afterMethod" finished-at="2024-01-28T15:31:07Z" duration-ms="147" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=LoginTest status=FAILURE method=Test1.LoginTest()[pri:4, instance:com.app.sunbeam.tests.Test1@38b27cdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterSuite()[pri:0, instance:com.app.sunbeam.tests.Test1@38b27cdc]" started-at="2024-01-28T15:31:07Z" name="afterSuite" finished-at="2024-01-28T15:31:07Z" duration-ms="396" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
      </class> <!-- com.app.sunbeam.tests.Test1 -->
    </test> <!-- Testingsites -->
  </suite> <!-- Regression Suite -->
</testng-results>
